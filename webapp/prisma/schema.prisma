generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bio           String?
  companyLogo   String?
  companyName   String?
  language      String?   @default("en")
  phoneNumber   String?
  role          String    @default("user")
  timezone      String?   @default("Europe/London")
  website       String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Display {
  id                 Int                @id @default(autoincrement())
  mainImage          String?
  image1             String?
  image2             String?
  qrCodePath         String?
  contactNumber      String?
  email              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  address            String?
  bathrooms          Int?
  bedrooms           Int?
  carouselDuration   Int?               @default(5000)
  carouselEnabled    Boolean?           @default(false)
  carouselTransition String?            @default("fade")
  companyLogoPath    String?
  description        String?
  features           String?
  garage             Int?
  image3             String?
  location           String?
  price              String?
  priceType          String?
  propertyType       String?
  showCompanyLogo    Boolean?           @default(false)
  sidebarColor       String?            @default("#7C3AED")
  sidebarPosition    String?            @default("left")
  livingroom         Int?
  showQrCode         Boolean?           @default(false)
  scheduledDisplays  ScheduledDisplay[]
}

model ScheduledDisplay {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean          @default(true)
  targetDisplayId Int
  scheduleType    String           @default("once")
  scheduleTime    String?
  scheduleDays    String?
  scheduleDate    Int?
  contentData     String
  lastExecuted    DateTime?
  executionCount  Int              @default(0)
  nextExecution   DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  targetDisplay   Display          @relation(fields: [targetDisplayId], references: [id], onDelete: Cascade)
  images          ScheduledImage[]

  @@index([targetDisplayId])
  @@index([startDate])
  @@index([isActive])
}

model ScheduledImage {
  id                 Int              @id @default(autoincrement())
  scheduledDisplayId Int
  imageType          String
  fileName           String
  filePath           String
  fileSize           Int?
  mimeType           String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  scheduledDisplay   ScheduledDisplay @relation(fields: [scheduledDisplayId], references: [id], onDelete: Cascade)

  @@index([scheduledDisplayId])
  @@index([imageType])
}
