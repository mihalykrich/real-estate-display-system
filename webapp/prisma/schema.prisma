// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth core models (compatible with Credentials + OAuth providers)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // Optional for credentials auth
  passwordHash  String?
  // User role for admin management
  role          String    @default("user") // "user" or "admin"
  
  // Profile Settings
  companyName   String?   // Company/Organization name
  companyLogo   String?   // Path to uploaded logo file
  phoneNumber   String?   // Contact phone number
  bio           String?   @db.Text // User bio/description
  website       String?   // Personal/company website
  timezone      String?   @default("Europe/London") // User timezone
  language      String?   @default("en") // Preferred language

  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Displays for Raspberry Pi signage
model Display {
  id             Int       @id @default(autoincrement())
  
  // Property Details
  address        String?
  location       String?
  price          String?
  priceType      String?   // "PCM", "Sale", etc.
  
  // Property Features
  bedrooms       Int?
  bathrooms      Int?
  garage         Int?
  propertyType   String?   // "House", "Apartment", "Cottage", etc.
  
  // Content
  description    String?   @db.Text
  features       String?   @db.Text // JSON array of features
  
  // Images
  mainImage      String?
  image1         String?
  image2         String?
  image3         String?
  
  // Contact & QR
  qrCodePath     String?
  contactNumber  String?
  email          String?
  
  // Display Styling
  sidebarColor   String?   @default("#7C3AED") // Default purple
  
  // Image Carousel Configuration
  carouselEnabled Boolean? @default(false)     // Enable/disable carousel
  carouselDuration Int?    @default(5000)      // Time per image in milliseconds
  carouselTransition String? @default("fade")  // Transition type: "none" or "fade"

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
